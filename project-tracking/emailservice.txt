# SMTP server configuration
spring.mail.host=your-smtp-server.com
spring.mail.port=587
spring.mail.username=your-email@example.com
spring.mail.password=your-email-password

# Additional email settings
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

@Service
public class EmailService {
    @Autowired
    private JavaMailSender javaMailSender;

    public void sendDevelopmentTasksByEmail(List<DevelopmentTask> developmentTasks) {
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setSubject("Development Tasks Status");
        mailMessage.setTo("recipient@example.com"); // Replace with the recipient's email address
        mailMessage.setText(generateTaskStatusTable(developmentTasks));

        javaMailSender.send(mailMessage);
    }

    private String generateTaskStatusTable(List<DevelopmentTask> developmentTasks) {
        // Generate an HTML table with task status
        StringBuilder tableHtml = new StringBuilder();
        tableHtml.append("<table border='1'><tr><th>Task Name</th><th>Status</th></tr>");

        for (DevelopmentTask task : developmentTasks) {
            tableHtml.append("<tr>");
            tableHtml.append("<td>").append(task.getTaskName()).append("</td>");
            tableHtml.append("<td>").append(task.getStatus()).append("</td>");
            tableHtml.append("</tr>");
        }

        tableHtml.append("</table>");
        return tableHtml.toString();
    }
}


@Controller
@RequestMapping("/development")
public class DevelopmentTrackerController {
    @Autowired
    private DevelopmentTaskService developmentTaskService;
    @Autowired
    private EmailService emailService;

    // ... Other methods ...

    @GetMapping("/send-email")
    public String sendDevelopmentTasksByEmail(Model model) {
        List<DevelopmentTask> developmentTasks = developmentTaskService.getAllDevelopmentTasks();
        emailService.sendDevelopmentTasksByEmail(developmentTasks);
        return "redirect:/development";
    }
}



@Service
public class EmailService {
    @Autowired
    private JavaMailSender javaMailSender;

    public void sendDevelopmentTasksByEmail(List<DevelopmentTask> developmentTasks) {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();

        try {
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);
            helper.setSubject("Development Tasks Status");
            helper.setTo("recipient@example.com"); // Replace with the recipient's email address

            // Create the HTML content with a formatted table
            String htmlContent = generateTaskStatusTable(developmentTasks);
            helper.setText(htmlContent, true); // Set the content as HTML

            javaMailSender.send(mimeMessage);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

    private String generateTaskStatusTable(List<DevelopmentTask> developmentTasks) {
        StringBuilder tableHtml = new StringBuilder();
        tableHtml.append("<html><body><table border='1' cellpadding='10'>");
        tableHtml.append("<tr><th>Task Name</th><th>Developer</th><th>Status</th><th>Deployment Date</th><th>Blockers/Issues</th></tr>");

        for (DevelopmentTask task : developmentTasks) {
            tableHtml.append("<tr>");
            tableHtml.append("<td>").append(task.getTaskName()).append("</td>");
            tableHtml.append("<td>").append(task.getDeveloper()).append("</td>");
            tableHtml.append("<td>").append(task.getStatus()).append("</td>");
            tableHtml.append("<td>").append(task.getDeploymentDate()).append("</td>");
            tableHtml.append("<td>").append(task.getBlockersOrIssues()).append("</td>");
            tableHtml.append("</tr>");
        }

        tableHtml.append("</table></body></html>");
        return tableHtml.toString();
    }
}


# Email Configuration
email.toEmails=recipient1@example.com,recipient2@example.com
email.ccEmails=cc1@example.com,cc2@example.com
email.statusMessage=Development tasks status:


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.util.List;

@Service
public class EmailService {
    @Autowired
    private JavaMailSender javaMailSender;

    @Value("${email.toEmails}")
    private List<String> toEmails;

    @Value("${email.ccEmails}")
    private List<String> ccEmails;

    @Value("${email.statusMessage}")
    private String statusMessage;

    public void sendDevelopmentTasksByEmail(List<DevelopmentTask> developmentTasks) {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();

        try {
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);
            helper.setSubject("Development Tasks Status");

            // Add recipients (to)
            helper.setTo(toEmails.toArray(new String[0]));

            // Add CC recipients (cc)
            helper.setCc(ccEmails.toArray(new String[0]));

            // Create the HTML content with a formatted table and status message
            String htmlContent = generateTaskStatusTable(developmentTasks, statusMessage);
            helper.setText(htmlContent, true); // Set the content as HTML

            javaMailSender.send(mimeMessage);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

    private String generateTaskStatusTable(List<DevelopmentTask> developmentTasks, String statusMessage) {
        StringBuilder tableHtml = new StringBuilder();
        tableHtml.append("<html><body>");
        tableHtml.append("<p>").append(statusMessage).append("</p>");
        tableHtml.append("<table border='1' cellpadding='10'>");
        tableHtml.append("<tr><th>Task Name</th><th>Developer</th><th>Status</th><th>Deployment Date</th><th>Blockers/Issues</th></tr>");

        for (DevelopmentTask task : developmentTasks) {
            tableHtml.append("<tr>");
            tableHtml.append("<td>").append(task.getTaskName()).append("</td>");
            tableHtml.append("<td>").append(task.getDeveloper()).append("</td>");
            tableHtml.append("<td>").append(task.getStatus()).append("</td>");
            tableHtml.append("<td>").append(task.getDeploymentDate()).append("</td>");
            tableHtml.append("<td>").append(task.getBlockersOrIssues()).append("</td>");
            tableHtml.append("</tr>");
        }

        tableHtml.append("</table></body></html>");
        return tableHtml.toString();
    }
}
